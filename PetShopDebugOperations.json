[ {
  "importPath" : ".Pet",
  "licenseUrl" : "http://www.apache.org/licenses/LICENSE-2.0.html",
  "appVersion" : "1.0.0",
  "generatorClass" : "class io.swagger.codegen.languages.CpprestsdkGenerator",
  "modelPackage" : "",
  "sortParamsByRequiredFlag" : true,
  "hasMore" : "true",
  "licenseInfo" : "Apache 2.0",
  "classVarName" : "pet",
  "hasImport" : true,
  "basePathWithoutHost" : "/v2",
  "operations" : {
    "classname" : "PetApi",
    "operation" : [ {
      "responseHeaders" : [ ],
      "hasAuthMethods" : true,
      "hasConsumes" : true,
      "hasProduces" : true,
      "hasParams" : true,
      "hasMore" : true,
      "isResponseBinary" : false,
      "hasReference" : false,
      "path" : "/pet",
      "operationId" : "addPet",
      "httpMethod" : "POST",
      "summary" : "Add a new pet to the store",
      "notes" : "",
      "baseName" : "Pet",
      "consumes" : [ {
        "hasMore" : "true",
        "mediaType" : "application/json"
      }, {
        "hasMore" : null,
        "mediaType" : "application/xml"
      } ],
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/xml"
      }, {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "bodyParam" : {
        "isBodyParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "Pet",
        "description" : "Pet object that needs to be added to the store",
        "baseType" : "Pet",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"Pet object that needs to be added to the store\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/Pet\"\r\n  }\r\n}",
        "isBinary" : false,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      },
      "allParams" : [ {
        "isBodyParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "Pet",
        "description" : "Pet object that needs to be added to the store",
        "baseType" : "Pet",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"Pet object that needs to be added to the store\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/Pet\"\r\n  }\r\n}",
        "isBinary" : false,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "bodyParams" : [ {
        "isBodyParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "Pet",
        "description" : "Pet object that needs to be added to the store",
        "baseType" : "Pet",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"Pet object that needs to be added to the store\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/Pet\"\r\n  }\r\n}",
        "isBinary" : false,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "pathParams" : [ ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "authMethods" : [ {
        "name" : "petstore_auth",
        "type" : "oauth2",
        "hasMore" : false,
        "isBasic" : false,
        "isOAuth" : true,
        "isApiKey" : false,
        "isKeyInQuery" : false,
        "isKeyInHeader" : false,
        "flow" : "implicit",
        "authorizationUrl" : "http://petstore.swagger.io/oauth/dialog",
        "scopes" : [ {
          "scope" : "write:pets",
          "hasMore" : "true",
          "description" : "modify pets in your account"
        }, {
          "scope" : "read:pets",
          "hasMore" : null,
          "description" : "read your pets"
        } ]
      } ],
      "tags" : [ "Pet" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "405",
        "message" : "Invalid input",
        "hasMore" : false,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Invalid input\"\r\n}",
        "wildcard" : false
      } ],
      "imports" : [ "Pet" ],
      "vendorExtensions" : { },
      "nickname" : "addPet",
      "operationIdLowerCase" : "addpet",
      "hasHeaderParams" : false,
      "hasQueryParams" : false,
      "hasFormParams" : false,
      "hasPathParams" : false,
      "hasBodyParam" : true
    }, {
      "responseHeaders" : [ ],
      "hasAuthMethods" : true,
      "hasConsumes" : false,
      "hasProduces" : true,
      "hasParams" : true,
      "hasOptionalParams" : true,
      "hasMore" : true,
      "isResponseBinary" : false,
      "hasReference" : false,
      "path" : "/pet/{petId}",
      "operationId" : "deletePet",
      "httpMethod" : "DELETE",
      "summary" : "Deletes a pet",
      "notes" : "",
      "baseName" : "Pet",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/xml"
      }, {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "allParams" : [ {
        "isPathParam" : true,
        "hasMore" : true,
        "isPrimitiveType" : true,
        "baseName" : "petId",
        "paramName" : "petId",
        "dataType" : "int64_t",
        "description" : "Pet id to delete",
        "example" : "789",
        "jsonSchema" : "{\r\n  \"name\" : \"petId\",\r\n  \"in\" : \"path\",\r\n  \"description\" : \"Pet id to delete\",\r\n  \"required\" : true,\r\n  \"type\" : \"integer\",\r\n  \"format\" : \"int64\"\r\n}",
        "isLong" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      }, {
        "isHeaderParam" : true,
        "secondaryParam" : true,
        "isPrimitiveType" : true,
        "baseName" : "api_key",
        "paramName" : "apiKey",
        "dataType" : "utility::string_t",
        "example" : "apiKey_example",
        "jsonSchema" : "{\r\n  \"name\" : \"api_key\",\r\n  \"in\" : \"header\",\r\n  \"required\" : false,\r\n  \"type\" : \"string\"\r\n}",
        "isString" : true,
        "isEnum" : false,
        "vendorExtensions" : { }
      } ],
      "bodyParams" : [ ],
      "pathParams" : [ {
        "isPathParam" : true,
        "baseName" : "petId",
        "paramName" : "petId",
        "dataType" : "int64_t",
        "description" : "Pet id to delete",
        "example" : "789",
        "jsonSchema" : "{\r\n  \"name\" : \"petId\",\r\n  \"in\" : \"path\",\r\n  \"description\" : \"Pet id to delete\",\r\n  \"required\" : true,\r\n  \"type\" : \"integer\",\r\n  \"format\" : \"int64\"\r\n}",
        "isLong" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "queryParams" : [ ],
      "headerParams" : [ {
        "isHeaderParam" : true,
        "baseName" : "api_key",
        "paramName" : "apiKey",
        "dataType" : "utility::string_t",
        "example" : "apiKey_example",
        "jsonSchema" : "{\r\n  \"name\" : \"api_key\",\r\n  \"in\" : \"header\",\r\n  \"required\" : false,\r\n  \"type\" : \"string\"\r\n}",
        "isString" : true,
        "isEnum" : false,
        "vendorExtensions" : { }
      } ],
      "formParams" : [ ],
      "authMethods" : [ {
        "name" : "petstore_auth",
        "type" : "oauth2",
        "hasMore" : false,
        "isBasic" : false,
        "isOAuth" : true,
        "isApiKey" : false,
        "isKeyInQuery" : false,
        "isKeyInHeader" : false,
        "flow" : "implicit",
        "authorizationUrl" : "http://petstore.swagger.io/oauth/dialog",
        "scopes" : [ {
          "scope" : "write:pets",
          "hasMore" : "true",
          "description" : "modify pets in your account"
        }, {
          "scope" : "read:pets",
          "hasMore" : null,
          "description" : "read your pets"
        } ]
      } ],
      "tags" : [ "Pet" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "400",
        "message" : "Invalid ID supplied",
        "hasMore" : true,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Invalid ID supplied\"\r\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "404",
        "message" : "Pet not found",
        "hasMore" : false,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Pet not found\"\r\n}",
        "wildcard" : false
      } ],
      "imports" : [ "utility::string_t" ],
      "vendorExtensions" : { },
      "nickname" : "deletePet",
      "operationIdLowerCase" : "deletepet",
      "hasHeaderParams" : true,
      "hasQueryParams" : false,
      "hasFormParams" : false,
      "hasPathParams" : true,
      "hasBodyParam" : false
    }, {
      "responseHeaders" : [ ],
      "hasAuthMethods" : true,
      "hasConsumes" : false,
      "hasProduces" : true,
      "hasParams" : true,
      "isListContainer" : true,
      "hasMore" : true,
      "isResponseBinary" : false,
      "hasReference" : true,
      "path" : "/pet/findByStatus",
      "operationId" : "findPetsByStatus",
      "returnType" : "std::vector<std::shared_ptr<Pet>>",
      "httpMethod" : "GET",
      "returnBaseType" : "Pet",
      "returnContainer" : "array",
      "summary" : "Finds Pets by status",
      "notes" : "Multiple status values can be provided with comma separated strings",
      "baseName" : "Pet",
      "defaultResponse" : "std::vector<std::shared_ptr<Pet>>()",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/xml"
      }, {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "allParams" : [ {
        "isQueryParam" : true,
        "isContainer" : true,
        "isCollectionFormatMulti" : true,
        "baseName" : "status",
        "paramName" : "status",
        "dataType" : "std::vector<utility::string_t>",
        "datatypeWithEnum" : "std::vector<StatusEnum>",
        "collectionFormat" : "multi",
        "description" : "Status values that need to be considered for filter",
        "baseType" : "utility::string_t",
        "jsonSchema" : "{\r\n  \"name\" : \"status\",\r\n  \"in\" : \"query\",\r\n  \"description\" : \"Status values that need to be considered for filter\",\r\n  \"required\" : true,\r\n  \"type\" : \"array\",\r\n  \"items\" : {\r\n    \"type\" : \"string\",\r\n    \"default\" : \"available\",\r\n    \"enum\" : [ \"available\", \"pending\", \"sold\" ]\r\n  },\r\n  \"collectionFormat\" : \"multi\"\r\n}",
        "isListContainer" : true,
        "isEnum" : false,
        "items" : {
          "baseName" : "Status",
          "complexType" : "utility::string_t",
          "getter" : "getStatus",
          "setter" : "setStatus",
          "datatype" : "utility::string_t",
          "datatypeWithEnum" : "StatusEnum",
          "name" : "Status",
          "defaultValue" : "U(\"\")",
          "defaultValueWithParam" : " = data.Status;",
          "baseType" : "utility::string_t",
          "example" : "null",
          "jsonSchema" : "{\r\n  \"type\" : \"string\",\r\n  \"default\" : \"available\",\r\n  \"enum\" : [ \"available\", \"pending\", \"sold\" ]\r\n}",
          "isNotContainer" : true,
          "isString" : true,
          "isEnum" : true,
          "_enum" : [ "available", "pending", "sold" ],
          "allowableValues" : {
            "values" : [ "available", "pending", "sold" ]
          },
          "vendorExtensions" : { }
        },
        "vendorExtensions" : { },
        "required" : true
      } ],
      "bodyParams" : [ ],
      "pathParams" : [ ],
      "queryParams" : [ {
        "isQueryParam" : true,
        "isContainer" : true,
        "isCollectionFormatMulti" : true,
        "baseName" : "status",
        "paramName" : "status",
        "dataType" : "std::vector<utility::string_t>",
        "datatypeWithEnum" : "std::vector<StatusEnum>",
        "collectionFormat" : "multi",
        "description" : "Status values that need to be considered for filter",
        "baseType" : "utility::string_t",
        "jsonSchema" : "{\r\n  \"name\" : \"status\",\r\n  \"in\" : \"query\",\r\n  \"description\" : \"Status values that need to be considered for filter\",\r\n  \"required\" : true,\r\n  \"type\" : \"array\",\r\n  \"items\" : {\r\n    \"type\" : \"string\",\r\n    \"default\" : \"available\",\r\n    \"enum\" : [ \"available\", \"pending\", \"sold\" ]\r\n  },\r\n  \"collectionFormat\" : \"multi\"\r\n}",
        "isListContainer" : true,
        "isEnum" : false,
        "items" : {
          "baseName" : "Status",
          "complexType" : "utility::string_t",
          "getter" : "getStatus",
          "setter" : "setStatus",
          "datatype" : "utility::string_t",
          "datatypeWithEnum" : "StatusEnum",
          "name" : "Status",
          "defaultValue" : "U(\"\")",
          "defaultValueWithParam" : " = data.Status;",
          "baseType" : "utility::string_t",
          "example" : "null",
          "jsonSchema" : "{\r\n  \"type\" : \"string\",\r\n  \"default\" : \"available\",\r\n  \"enum\" : [ \"available\", \"pending\", \"sold\" ]\r\n}",
          "isNotContainer" : true,
          "isString" : true,
          "isEnum" : true,
          "_enum" : [ "available", "pending", "sold" ],
          "allowableValues" : {
            "values" : [ "available", "pending", "sold" ]
          },
          "vendorExtensions" : { }
        },
        "vendorExtensions" : { },
        "required" : true
      } ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "authMethods" : [ {
        "name" : "petstore_auth",
        "type" : "oauth2",
        "hasMore" : false,
        "isBasic" : false,
        "isOAuth" : true,
        "isApiKey" : false,
        "isKeyInQuery" : false,
        "isKeyInHeader" : false,
        "flow" : "implicit",
        "authorizationUrl" : "http://petstore.swagger.io/oauth/dialog",
        "scopes" : [ {
          "scope" : "write:pets",
          "hasMore" : "true",
          "description" : "modify pets in your account"
        }, {
          "scope" : "read:pets",
          "hasMore" : null,
          "description" : "read your pets"
        } ]
      } ],
      "tags" : [ "Pet" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "200",
        "message" : "successful operation",
        "hasMore" : true,
        "dataType" : "std::vector<std::shared_ptr<Pet>>",
        "baseType" : "Pet",
        "containerType" : "array",
        "isDefault" : true,
        "simpleType" : false,
        "primitiveType" : false,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Pet"
          }
        },
        "jsonSchema" : "{\r\n  \"description\" : \"successful operation\",\r\n  \"schema\" : {\r\n    \"type\" : \"array\",\r\n    \"items\" : {\r\n      \"$ref\" : \"#/definitions/Pet\"\r\n    }\r\n  }\r\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "400",
        "message" : "Invalid status value",
        "hasMore" : false,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Invalid status value\"\r\n}",
        "wildcard" : false
      } ],
      "imports" : [ "utility::string_t", "Pet" ],
      "examples" : [ {
        "contentType" : "application/xml",
        "example" : "<Pet>\n  <id>123456</id>\n  <name>doggie</name>\n  <photoUrls>\n    <photoUrls>string</photoUrls>\n  </photoUrls>\n  <tags>\n  </tags>\n  <status>string</status>\n</Pet>"
      }, {
        "contentType" : "application/json",
        "example" : "[ {\r\n  \"photoUrls\" : [ \"aeiou\" ],\r\n  \"name\" : \"doggie\",\r\n  \"id\" : 123456789,\r\n  \"category\" : {\r\n    \"name\" : \"aeiou\",\r\n    \"id\" : 123456789\r\n  },\r\n  \"tags\" : [ {\r\n    \"name\" : \"aeiou\",\r\n    \"id\" : 123456789\r\n  } ],\r\n  \"status\" : \"aeiou\"\r\n} ]"
      } ],
      "vendorExtensions" : { },
      "nickname" : "findPetsByStatus",
      "operationIdLowerCase" : "findpetsbystatus",
      "hasHeaderParams" : false,
      "hasQueryParams" : true,
      "hasFormParams" : false,
      "hasPathParams" : false,
      "hasBodyParam" : false
    }, {
      "responseHeaders" : [ ],
      "hasAuthMethods" : true,
      "hasConsumes" : false,
      "hasProduces" : true,
      "hasParams" : true,
      "isListContainer" : true,
      "hasMore" : true,
      "isResponseBinary" : false,
      "hasReference" : true,
      "path" : "/pet/findByTags",
      "operationId" : "findPetsByTags",
      "returnType" : "std::vector<std::shared_ptr<Pet>>",
      "httpMethod" : "GET",
      "returnBaseType" : "Pet",
      "returnContainer" : "array",
      "summary" : "Finds Pets by tags",
      "notes" : "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
      "baseName" : "Pet",
      "defaultResponse" : "std::vector<std::shared_ptr<Pet>>()",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/xml"
      }, {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "allParams" : [ {
        "isQueryParam" : true,
        "isContainer" : true,
        "isCollectionFormatMulti" : true,
        "baseName" : "tags",
        "paramName" : "tags",
        "dataType" : "std::vector<utility::string_t>",
        "collectionFormat" : "multi",
        "description" : "Tags to filter by",
        "baseType" : "utility::string_t",
        "jsonSchema" : "{\r\n  \"name\" : \"tags\",\r\n  \"in\" : \"query\",\r\n  \"description\" : \"Tags to filter by\",\r\n  \"required\" : true,\r\n  \"type\" : \"array\",\r\n  \"items\" : {\r\n    \"type\" : \"string\"\r\n  },\r\n  \"collectionFormat\" : \"multi\"\r\n}",
        "isListContainer" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "bodyParams" : [ ],
      "pathParams" : [ ],
      "queryParams" : [ {
        "isQueryParam" : true,
        "isContainer" : true,
        "isCollectionFormatMulti" : true,
        "baseName" : "tags",
        "paramName" : "tags",
        "dataType" : "std::vector<utility::string_t>",
        "collectionFormat" : "multi",
        "description" : "Tags to filter by",
        "baseType" : "utility::string_t",
        "jsonSchema" : "{\r\n  \"name\" : \"tags\",\r\n  \"in\" : \"query\",\r\n  \"description\" : \"Tags to filter by\",\r\n  \"required\" : true,\r\n  \"type\" : \"array\",\r\n  \"items\" : {\r\n    \"type\" : \"string\"\r\n  },\r\n  \"collectionFormat\" : \"multi\"\r\n}",
        "isListContainer" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "authMethods" : [ {
        "name" : "petstore_auth",
        "type" : "oauth2",
        "hasMore" : false,
        "isBasic" : false,
        "isOAuth" : true,
        "isApiKey" : false,
        "isKeyInQuery" : false,
        "isKeyInHeader" : false,
        "flow" : "implicit",
        "authorizationUrl" : "http://petstore.swagger.io/oauth/dialog",
        "scopes" : [ {
          "scope" : "write:pets",
          "hasMore" : "true",
          "description" : "modify pets in your account"
        }, {
          "scope" : "read:pets",
          "hasMore" : null,
          "description" : "read your pets"
        } ]
      } ],
      "tags" : [ "Pet" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "200",
        "message" : "successful operation",
        "hasMore" : true,
        "dataType" : "std::vector<std::shared_ptr<Pet>>",
        "baseType" : "Pet",
        "containerType" : "array",
        "isDefault" : true,
        "simpleType" : false,
        "primitiveType" : false,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Pet"
          }
        },
        "jsonSchema" : "{\r\n  \"description\" : \"successful operation\",\r\n  \"schema\" : {\r\n    \"type\" : \"array\",\r\n    \"items\" : {\r\n      \"$ref\" : \"#/definitions/Pet\"\r\n    }\r\n  }\r\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "400",
        "message" : "Invalid tag value",
        "hasMore" : false,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Invalid tag value\"\r\n}",
        "wildcard" : false
      } ],
      "imports" : [ "utility::string_t", "Pet" ],
      "examples" : [ {
        "contentType" : "application/xml",
        "example" : "<Pet>\n  <id>123456</id>\n  <name>doggie</name>\n  <photoUrls>\n    <photoUrls>string</photoUrls>\n  </photoUrls>\n  <tags>\n  </tags>\n  <status>string</status>\n</Pet>"
      }, {
        "contentType" : "application/json",
        "example" : "[ {\r\n  \"photoUrls\" : [ \"aeiou\" ],\r\n  \"name\" : \"doggie\",\r\n  \"id\" : 123456789,\r\n  \"category\" : {\r\n    \"name\" : \"aeiou\",\r\n    \"id\" : 123456789\r\n  },\r\n  \"tags\" : [ {\r\n    \"name\" : \"aeiou\",\r\n    \"id\" : 123456789\r\n  } ],\r\n  \"status\" : \"aeiou\"\r\n} ]"
      } ],
      "vendorExtensions" : { },
      "nickname" : "findPetsByTags",
      "operationIdLowerCase" : "findpetsbytags",
      "hasHeaderParams" : false,
      "hasQueryParams" : true,
      "hasFormParams" : false,
      "hasPathParams" : false,
      "hasBodyParam" : false
    }, {
      "responseHeaders" : [ ],
      "hasAuthMethods" : true,
      "hasConsumes" : false,
      "hasProduces" : true,
      "hasParams" : true,
      "returnSimpleType" : true,
      "hasMore" : true,
      "isResponseBinary" : false,
      "hasReference" : true,
      "path" : "/pet/{petId}",
      "operationId" : "getPetById",
      "returnType" : "std::shared_ptr<Pet>",
      "httpMethod" : "GET",
      "returnBaseType" : "Pet",
      "summary" : "Find pet by ID",
      "notes" : "Returns a single pet",
      "baseName" : "Pet",
      "defaultResponse" : "new Pet()",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/xml"
      }, {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "allParams" : [ {
        "isPathParam" : true,
        "isPrimitiveType" : true,
        "baseName" : "petId",
        "paramName" : "petId",
        "dataType" : "int64_t",
        "description" : "ID of pet to return",
        "example" : "789",
        "jsonSchema" : "{\r\n  \"name\" : \"petId\",\r\n  \"in\" : \"path\",\r\n  \"description\" : \"ID of pet to return\",\r\n  \"required\" : true,\r\n  \"type\" : \"integer\",\r\n  \"format\" : \"int64\"\r\n}",
        "isLong" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "bodyParams" : [ ],
      "pathParams" : [ {
        "isPathParam" : true,
        "baseName" : "petId",
        "paramName" : "petId",
        "dataType" : "int64_t",
        "description" : "ID of pet to return",
        "example" : "789",
        "jsonSchema" : "{\r\n  \"name\" : \"petId\",\r\n  \"in\" : \"path\",\r\n  \"description\" : \"ID of pet to return\",\r\n  \"required\" : true,\r\n  \"type\" : \"integer\",\r\n  \"format\" : \"int64\"\r\n}",
        "isLong" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "authMethods" : [ {
        "name" : "api_key",
        "type" : "apiKey",
        "hasMore" : false,
        "isBasic" : false,
        "isOAuth" : false,
        "isApiKey" : true,
        "keyParamName" : "api_key",
        "isKeyInQuery" : false,
        "isKeyInHeader" : true
      } ],
      "tags" : [ "Pet" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "200",
        "message" : "successful operation",
        "hasMore" : true,
        "dataType" : "std::shared_ptr<Pet>",
        "baseType" : "Pet",
        "isDefault" : true,
        "simpleType" : true,
        "primitiveType" : false,
        "isBinary" : false,
        "schema" : {
          "$ref" : "#/definitions/Pet"
        },
        "jsonSchema" : "{\r\n  \"description\" : \"successful operation\",\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/Pet\"\r\n  }\r\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "400",
        "message" : "Invalid ID supplied",
        "hasMore" : true,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Invalid ID supplied\"\r\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "404",
        "message" : "Pet not found",
        "hasMore" : false,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Pet not found\"\r\n}",
        "wildcard" : false
      } ],
      "imports" : [ "Pet" ],
      "examples" : [ {
        "contentType" : "application/xml",
        "example" : "<Pet>\n  <id>123456</id>\n  <name>doggie</name>\n  <photoUrls>\n    <photoUrls>string</photoUrls>\n  </photoUrls>\n  <tags>\n  </tags>\n  <status>string</status>\n</Pet>"
      }, {
        "contentType" : "application/json",
        "example" : "{\r\n  \"photoUrls\" : [ \"aeiou\" ],\r\n  \"name\" : \"doggie\",\r\n  \"id\" : 123456789,\r\n  \"category\" : {\r\n    \"name\" : \"aeiou\",\r\n    \"id\" : 123456789\r\n  },\r\n  \"tags\" : [ {\r\n    \"name\" : \"aeiou\",\r\n    \"id\" : 123456789\r\n  } ],\r\n  \"status\" : \"aeiou\"\r\n}"
      } ],
      "vendorExtensions" : { },
      "nickname" : "getPetById",
      "operationIdLowerCase" : "getpetbyid",
      "hasHeaderParams" : false,
      "hasQueryParams" : false,
      "hasFormParams" : false,
      "hasPathParams" : true,
      "hasBodyParam" : false
    }, {
      "responseHeaders" : [ ],
      "hasAuthMethods" : true,
      "hasConsumes" : true,
      "hasProduces" : true,
      "hasParams" : true,
      "hasMore" : true,
      "isResponseBinary" : false,
      "hasReference" : false,
      "path" : "/pet",
      "operationId" : "updatePet",
      "httpMethod" : "PUT",
      "summary" : "Update an existing pet",
      "notes" : "",
      "baseName" : "Pet",
      "consumes" : [ {
        "hasMore" : "true",
        "mediaType" : "application/json"
      }, {
        "hasMore" : null,
        "mediaType" : "application/xml"
      } ],
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/xml"
      }, {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "bodyParam" : {
        "isBodyParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "Pet",
        "description" : "Pet object that needs to be added to the store",
        "baseType" : "Pet",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"Pet object that needs to be added to the store\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/Pet\"\r\n  }\r\n}",
        "isBinary" : false,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      },
      "allParams" : [ {
        "isBodyParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "Pet",
        "description" : "Pet object that needs to be added to the store",
        "baseType" : "Pet",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"Pet object that needs to be added to the store\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/Pet\"\r\n  }\r\n}",
        "isBinary" : false,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "bodyParams" : [ {
        "isBodyParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "Pet",
        "description" : "Pet object that needs to be added to the store",
        "baseType" : "Pet",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"Pet object that needs to be added to the store\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/Pet\"\r\n  }\r\n}",
        "isBinary" : false,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "pathParams" : [ ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "authMethods" : [ {
        "name" : "petstore_auth",
        "type" : "oauth2",
        "hasMore" : false,
        "isBasic" : false,
        "isOAuth" : true,
        "isApiKey" : false,
        "isKeyInQuery" : false,
        "isKeyInHeader" : false,
        "flow" : "implicit",
        "authorizationUrl" : "http://petstore.swagger.io/oauth/dialog",
        "scopes" : [ {
          "scope" : "write:pets",
          "hasMore" : "true",
          "description" : "modify pets in your account"
        }, {
          "scope" : "read:pets",
          "hasMore" : null,
          "description" : "read your pets"
        } ]
      } ],
      "tags" : [ "Pet" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "400",
        "message" : "Invalid ID supplied",
        "hasMore" : true,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Invalid ID supplied\"\r\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "404",
        "message" : "Pet not found",
        "hasMore" : true,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Pet not found\"\r\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "405",
        "message" : "Validation exception",
        "hasMore" : false,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Validation exception\"\r\n}",
        "wildcard" : false
      } ],
      "imports" : [ "Pet" ],
      "vendorExtensions" : { },
      "nickname" : "updatePet",
      "operationIdLowerCase" : "updatepet",
      "hasHeaderParams" : false,
      "hasQueryParams" : false,
      "hasFormParams" : false,
      "hasPathParams" : false,
      "hasBodyParam" : true
    }, {
      "responseHeaders" : [ ],
      "hasAuthMethods" : true,
      "hasConsumes" : true,
      "hasProduces" : true,
      "hasParams" : true,
      "hasOptionalParams" : true,
      "hasMore" : true,
      "isResponseBinary" : false,
      "hasReference" : false,
      "path" : "/pet/{petId}",
      "operationId" : "updatePetWithForm",
      "httpMethod" : "POST",
      "summary" : "Updates a pet in the store with form data",
      "notes" : "",
      "baseName" : "Pet",
      "consumes" : [ {
        "hasMore" : null,
        "mediaType" : "application/x-www-form-urlencoded"
      } ],
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/xml"
      }, {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "allParams" : [ {
        "isPathParam" : true,
        "hasMore" : true,
        "isPrimitiveType" : true,
        "baseName" : "petId",
        "paramName" : "petId",
        "dataType" : "int64_t",
        "description" : "ID of pet that needs to be updated",
        "example" : "789",
        "jsonSchema" : "{\r\n  \"name\" : \"petId\",\r\n  \"in\" : \"path\",\r\n  \"description\" : \"ID of pet that needs to be updated\",\r\n  \"required\" : true,\r\n  \"type\" : \"integer\",\r\n  \"format\" : \"int64\"\r\n}",
        "isLong" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      }, {
        "isFormParam" : true,
        "hasMore" : true,
        "secondaryParam" : true,
        "isPrimitiveType" : true,
        "baseName" : "name",
        "paramName" : "name",
        "dataType" : "utility::string_t",
        "description" : "Updated name of the pet",
        "example" : "name_example",
        "jsonSchema" : "{\r\n  \"name\" : \"name\",\r\n  \"in\" : \"formData\",\r\n  \"description\" : \"Updated name of the pet\",\r\n  \"required\" : false,\r\n  \"type\" : \"string\"\r\n}",
        "isString" : true,
        "notFile" : true,
        "isEnum" : false,
        "vendorExtensions" : { }
      }, {
        "isFormParam" : true,
        "secondaryParam" : true,
        "isPrimitiveType" : true,
        "baseName" : "status",
        "paramName" : "status",
        "dataType" : "utility::string_t",
        "description" : "Updated status of the pet",
        "example" : "status_example",
        "jsonSchema" : "{\r\n  \"name\" : \"status\",\r\n  \"in\" : \"formData\",\r\n  \"description\" : \"Updated status of the pet\",\r\n  \"required\" : false,\r\n  \"type\" : \"string\"\r\n}",
        "isString" : true,
        "notFile" : true,
        "isEnum" : false,
        "vendorExtensions" : { }
      } ],
      "bodyParams" : [ ],
      "pathParams" : [ {
        "isPathParam" : true,
        "baseName" : "petId",
        "paramName" : "petId",
        "dataType" : "int64_t",
        "description" : "ID of pet that needs to be updated",
        "example" : "789",
        "jsonSchema" : "{\r\n  \"name\" : \"petId\",\r\n  \"in\" : \"path\",\r\n  \"description\" : \"ID of pet that needs to be updated\",\r\n  \"required\" : true,\r\n  \"type\" : \"integer\",\r\n  \"format\" : \"int64\"\r\n}",
        "isLong" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ {
        "isFormParam" : true,
        "hasMore" : true,
        "baseName" : "name",
        "paramName" : "name",
        "dataType" : "utility::string_t",
        "description" : "Updated name of the pet",
        "example" : "name_example",
        "jsonSchema" : "{\r\n  \"name\" : \"name\",\r\n  \"in\" : \"formData\",\r\n  \"description\" : \"Updated name of the pet\",\r\n  \"required\" : false,\r\n  \"type\" : \"string\"\r\n}",
        "isString" : true,
        "notFile" : true,
        "isEnum" : false,
        "vendorExtensions" : { }
      }, {
        "isFormParam" : true,
        "secondaryParam" : true,
        "baseName" : "status",
        "paramName" : "status",
        "dataType" : "utility::string_t",
        "description" : "Updated status of the pet",
        "example" : "status_example",
        "jsonSchema" : "{\r\n  \"name\" : \"status\",\r\n  \"in\" : \"formData\",\r\n  \"description\" : \"Updated status of the pet\",\r\n  \"required\" : false,\r\n  \"type\" : \"string\"\r\n}",
        "isString" : true,
        "notFile" : true,
        "isEnum" : false,
        "vendorExtensions" : { }
      } ],
      "authMethods" : [ {
        "name" : "petstore_auth",
        "type" : "oauth2",
        "hasMore" : false,
        "isBasic" : false,
        "isOAuth" : true,
        "isApiKey" : false,
        "isKeyInQuery" : false,
        "isKeyInHeader" : false,
        "flow" : "implicit",
        "authorizationUrl" : "http://petstore.swagger.io/oauth/dialog",
        "scopes" : [ {
          "scope" : "write:pets",
          "hasMore" : "true",
          "description" : "modify pets in your account"
        }, {
          "scope" : "read:pets",
          "hasMore" : null,
          "description" : "read your pets"
        } ]
      } ],
      "tags" : [ "Pet" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "405",
        "message" : "Invalid input",
        "hasMore" : false,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Invalid input\"\r\n}",
        "wildcard" : false
      } ],
      "imports" : [ "utility::string_t" ],
      "vendorExtensions" : { },
      "nickname" : "updatePetWithForm",
      "operationIdLowerCase" : "updatepetwithform",
      "hasHeaderParams" : false,
      "hasQueryParams" : false,
      "hasFormParams" : true,
      "hasPathParams" : true,
      "hasBodyParam" : false
    }, {
      "responseHeaders" : [ ],
      "hasAuthMethods" : true,
      "hasConsumes" : true,
      "hasProduces" : true,
      "hasParams" : true,
      "hasOptionalParams" : true,
      "returnSimpleType" : true,
      "isResponseBinary" : false,
      "hasReference" : true,
      "path" : "/pet/{petId}/uploadImage",
      "operationId" : "uploadFile",
      "returnType" : "std::shared_ptr<ApiResponse>",
      "httpMethod" : "POST",
      "returnBaseType" : "ApiResponse",
      "summary" : "uploads an image",
      "notes" : "",
      "baseName" : "Pet",
      "defaultResponse" : "new ApiResponse()",
      "consumes" : [ {
        "hasMore" : null,
        "mediaType" : "multipart/form-data"
      } ],
      "produces" : [ {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "allParams" : [ {
        "isPathParam" : true,
        "hasMore" : true,
        "isPrimitiveType" : true,
        "baseName" : "petId",
        "paramName" : "petId",
        "dataType" : "int64_t",
        "description" : "ID of pet to update",
        "example" : "789",
        "jsonSchema" : "{\r\n  \"name\" : \"petId\",\r\n  \"in\" : \"path\",\r\n  \"description\" : \"ID of pet to update\",\r\n  \"required\" : true,\r\n  \"type\" : \"integer\",\r\n  \"format\" : \"int64\"\r\n}",
        "isLong" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      }, {
        "isFormParam" : true,
        "hasMore" : true,
        "secondaryParam" : true,
        "isPrimitiveType" : true,
        "baseName" : "additionalMetadata",
        "paramName" : "additionalMetadata",
        "dataType" : "utility::string_t",
        "description" : "Additional data to pass to server",
        "example" : "additionalMetadata_example",
        "jsonSchema" : "{\r\n  \"name\" : \"additionalMetadata\",\r\n  \"in\" : \"formData\",\r\n  \"description\" : \"Additional data to pass to server\",\r\n  \"required\" : false,\r\n  \"type\" : \"string\"\r\n}",
        "isString" : true,
        "notFile" : true,
        "isEnum" : false,
        "vendorExtensions" : { }
      }, {
        "isFormParam" : true,
        "secondaryParam" : true,
        "baseName" : "file",
        "paramName" : "file",
        "dataType" : "std::shared_ptr<HttpContent>",
        "description" : "file to upload",
        "example" : "/path/to/file.txt",
        "jsonSchema" : "{\r\n  \"name\" : \"file\",\r\n  \"in\" : \"formData\",\r\n  \"description\" : \"file to upload\",\r\n  \"required\" : false,\r\n  \"type\" : \"file\"\r\n}",
        "isFile" : true,
        "isEnum" : false,
        "vendorExtensions" : { }
      } ],
      "bodyParams" : [ ],
      "pathParams" : [ {
        "isPathParam" : true,
        "baseName" : "petId",
        "paramName" : "petId",
        "dataType" : "int64_t",
        "description" : "ID of pet to update",
        "example" : "789",
        "jsonSchema" : "{\r\n  \"name\" : \"petId\",\r\n  \"in\" : \"path\",\r\n  \"description\" : \"ID of pet to update\",\r\n  \"required\" : true,\r\n  \"type\" : \"integer\",\r\n  \"format\" : \"int64\"\r\n}",
        "isLong" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ {
        "isFormParam" : true,
        "hasMore" : true,
        "baseName" : "additionalMetadata",
        "paramName" : "additionalMetadata",
        "dataType" : "utility::string_t",
        "description" : "Additional data to pass to server",
        "example" : "additionalMetadata_example",
        "jsonSchema" : "{\r\n  \"name\" : \"additionalMetadata\",\r\n  \"in\" : \"formData\",\r\n  \"description\" : \"Additional data to pass to server\",\r\n  \"required\" : false,\r\n  \"type\" : \"string\"\r\n}",
        "isString" : true,
        "notFile" : true,
        "isEnum" : false,
        "vendorExtensions" : { }
      }, {
        "isFormParam" : true,
        "secondaryParam" : true,
        "baseName" : "file",
        "paramName" : "file",
        "dataType" : "std::shared_ptr<HttpContent>",
        "description" : "file to upload",
        "example" : "/path/to/file.txt",
        "jsonSchema" : "{\r\n  \"name\" : \"file\",\r\n  \"in\" : \"formData\",\r\n  \"description\" : \"file to upload\",\r\n  \"required\" : false,\r\n  \"type\" : \"file\"\r\n}",
        "isFile" : true,
        "isEnum" : false,
        "vendorExtensions" : { }
      } ],
      "authMethods" : [ {
        "name" : "petstore_auth",
        "type" : "oauth2",
        "hasMore" : false,
        "isBasic" : false,
        "isOAuth" : true,
        "isApiKey" : false,
        "isKeyInQuery" : false,
        "isKeyInHeader" : false,
        "flow" : "implicit",
        "authorizationUrl" : "http://petstore.swagger.io/oauth/dialog",
        "scopes" : [ {
          "scope" : "write:pets",
          "hasMore" : "true",
          "description" : "modify pets in your account"
        }, {
          "scope" : "read:pets",
          "hasMore" : null,
          "description" : "read your pets"
        } ]
      } ],
      "tags" : [ "Pet" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "200",
        "message" : "successful operation",
        "hasMore" : false,
        "dataType" : "std::shared_ptr<ApiResponse>",
        "baseType" : "ApiResponse",
        "isDefault" : true,
        "simpleType" : true,
        "primitiveType" : false,
        "isBinary" : false,
        "schema" : {
          "$ref" : "#/definitions/ApiResponse"
        },
        "jsonSchema" : "{\r\n  \"description\" : \"successful operation\",\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/ApiResponse\"\r\n  }\r\n}",
        "wildcard" : false
      } ],
      "imports" : [ "utility::string_t", "ApiResponse", "HttpContent" ],
      "examples" : [ {
        "contentType" : "application/json",
        "example" : "{\r\n  \"code\" : 123,\r\n  \"type\" : \"aeiou\",\r\n  \"message\" : \"aeiou\"\r\n}"
      } ],
      "vendorExtensions" : { },
      "nickname" : "uploadFile",
      "operationIdLowerCase" : "uploadfile",
      "hasHeaderParams" : false,
      "hasQueryParams" : false,
      "hasFormParams" : true,
      "hasPathParams" : true,
      "hasBodyParam" : false
    } ],
    "pathPrefix" : "pet"
  },
  "infoUrl" : null,
  "baseName" : "Pet",
  "package" : "",
  "imports" : [ {
    "import" : "#include \"Pet.h\""
  }, {
    "import" : "#include <cpprest/details/basic_types.h>"
  }, {
    "import" : "#include \"ApiResponse.h\""
  }, {
    "import" : "#include \"HttpContent.h\""
  } ],
  "appName" : "Swagger Petstore",
  "contextPath" : "/v2",
  "appDescription" : "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
  "termsOfService" : "http://swagger.io/terms/",
  "releaseNote" : "Minor update",
  "version" : "1.0.0",
  "basePath" : "http://petstore.swagger.io/v2",
  "classname" : "PetApi",
  "gitRepoId" : "YOUR_GIT_REPO_ID",
  "generatedDate" : "2016-05-04T18:39:34.329+02:00",
  "infoEmail" : "apiteam@swagger.io",
  "gitUserId" : "YOUR_GIT_USR_ID"
}, {
  "importPath" : ".Store",
  "licenseUrl" : "http://www.apache.org/licenses/LICENSE-2.0.html",
  "appVersion" : "1.0.0",
  "generatorClass" : "class io.swagger.codegen.languages.CpprestsdkGenerator",
  "modelPackage" : "",
  "sortParamsByRequiredFlag" : true,
  "hasMore" : "true",
  "licenseInfo" : "Apache 2.0",
  "classVarName" : "store",
  "hasImport" : true,
  "basePathWithoutHost" : "/v2",
  "operations" : {
    "classname" : "StoreApi",
    "operation" : [ {
      "responseHeaders" : [ ],
      "hasConsumes" : false,
      "hasProduces" : true,
      "hasParams" : true,
      "hasMore" : true,
      "isResponseBinary" : false,
      "hasReference" : false,
      "path" : "/store/order/{orderId}",
      "operationId" : "deleteOrder",
      "httpMethod" : "DELETE",
      "summary" : "Delete purchase order by ID",
      "notes" : "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
      "baseName" : "Store",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/xml"
      }, {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "allParams" : [ {
        "isPathParam" : true,
        "isPrimitiveType" : true,
        "baseName" : "orderId",
        "paramName" : "orderId",
        "dataType" : "int64_t",
        "description" : "ID of the order that needs to be deleted",
        "example" : "789",
        "jsonSchema" : "{\r\n  \"name\" : \"orderId\",\r\n  \"in\" : \"path\",\r\n  \"description\" : \"ID of the order that needs to be deleted\",\r\n  \"required\" : true,\r\n  \"type\" : \"integer\",\r\n  \"minimum\" : 1.0,\r\n  \"format\" : \"int64\"\r\n}",
        "isLong" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true,
        "minimum" : 1.0
      } ],
      "bodyParams" : [ ],
      "pathParams" : [ {
        "isPathParam" : true,
        "baseName" : "orderId",
        "paramName" : "orderId",
        "dataType" : "int64_t",
        "description" : "ID of the order that needs to be deleted",
        "example" : "789",
        "jsonSchema" : "{\r\n  \"name\" : \"orderId\",\r\n  \"in\" : \"path\",\r\n  \"description\" : \"ID of the order that needs to be deleted\",\r\n  \"required\" : true,\r\n  \"type\" : \"integer\",\r\n  \"minimum\" : 1.0,\r\n  \"format\" : \"int64\"\r\n}",
        "isLong" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true,
        "minimum" : 1.0
      } ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "tags" : [ "Store" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "400",
        "message" : "Invalid ID supplied",
        "hasMore" : true,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Invalid ID supplied\"\r\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "404",
        "message" : "Order not found",
        "hasMore" : false,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Order not found\"\r\n}",
        "wildcard" : false
      } ],
      "imports" : [ ],
      "vendorExtensions" : { },
      "nickname" : "deleteOrder",
      "operationIdLowerCase" : "deleteorder",
      "hasHeaderParams" : false,
      "hasQueryParams" : false,
      "hasFormParams" : false,
      "hasPathParams" : true,
      "hasBodyParam" : false
    }, {
      "responseHeaders" : [ ],
      "hasAuthMethods" : true,
      "hasConsumes" : false,
      "hasProduces" : true,
      "isMapContainer" : true,
      "hasMore" : true,
      "isResponseBinary" : false,
      "hasReference" : false,
      "path" : "/store/inventory",
      "operationId" : "getInventory",
      "returnType" : "std::map<utility::string_t, int32_t>",
      "httpMethod" : "GET",
      "returnBaseType" : "std::map",
      "returnContainer" : "map",
      "summary" : "Returns pet inventories by status",
      "notes" : "Returns a map of status codes to quantities",
      "baseName" : "Store",
      "defaultResponse" : "std::map<utility::string_t, int32_t>()",
      "produces" : [ {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "allParams" : [ ],
      "bodyParams" : [ ],
      "pathParams" : [ ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "authMethods" : [ {
        "name" : "api_key",
        "type" : "apiKey",
        "hasMore" : false,
        "isBasic" : false,
        "isOAuth" : false,
        "isApiKey" : true,
        "keyParamName" : "api_key",
        "isKeyInQuery" : false,
        "isKeyInHeader" : true
      } ],
      "tags" : [ "Store" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "200",
        "message" : "successful operation",
        "hasMore" : false,
        "dataType" : "std::map<utility::string_t, int32_t>",
        "baseType" : "std::map",
        "containerType" : "map",
        "isDefault" : true,
        "simpleType" : false,
        "primitiveType" : false,
        "isMapContainer" : true,
        "isListContainer" : false,
        "isBinary" : false,
        "schema" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "jsonSchema" : "{\r\n  \"description\" : \"successful operation\",\r\n  \"schema\" : {\r\n    \"type\" : \"object\",\r\n    \"additionalProperties\" : {\r\n      \"type\" : \"integer\",\r\n      \"format\" : \"int32\"\r\n    }\r\n  }\r\n}",
        "wildcard" : false
      } ],
      "imports" : [ "std::map" ],
      "examples" : [ {
        "contentType" : "application/json",
        "example" : "{\r\n  \"key\" : 123\r\n}"
      } ],
      "vendorExtensions" : { },
      "nickname" : "getInventory",
      "operationIdLowerCase" : "getinventory",
      "hasHeaderParams" : false,
      "hasQueryParams" : false,
      "hasFormParams" : false,
      "hasPathParams" : false,
      "hasBodyParam" : false
    }, {
      "responseHeaders" : [ ],
      "hasConsumes" : false,
      "hasProduces" : true,
      "hasParams" : true,
      "returnSimpleType" : true,
      "hasMore" : true,
      "isResponseBinary" : false,
      "hasReference" : true,
      "path" : "/store/order/{orderId}",
      "operationId" : "getOrderById",
      "returnType" : "std::shared_ptr<Order>",
      "httpMethod" : "GET",
      "returnBaseType" : "Order",
      "summary" : "Find purchase order by ID",
      "notes" : "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
      "baseName" : "Store",
      "defaultResponse" : "new Order()",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/xml"
      }, {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "allParams" : [ {
        "isPathParam" : true,
        "isPrimitiveType" : true,
        "baseName" : "orderId",
        "paramName" : "orderId",
        "dataType" : "int64_t",
        "description" : "ID of pet that needs to be fetched",
        "example" : "789",
        "jsonSchema" : "{\r\n  \"name\" : \"orderId\",\r\n  \"in\" : \"path\",\r\n  \"description\" : \"ID of pet that needs to be fetched\",\r\n  \"required\" : true,\r\n  \"type\" : \"integer\",\r\n  \"maximum\" : 10.0,\r\n  \"minimum\" : 1.0,\r\n  \"format\" : \"int64\"\r\n}",
        "isLong" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true,
        "maximum" : 10.0,
        "minimum" : 1.0
      } ],
      "bodyParams" : [ ],
      "pathParams" : [ {
        "isPathParam" : true,
        "baseName" : "orderId",
        "paramName" : "orderId",
        "dataType" : "int64_t",
        "description" : "ID of pet that needs to be fetched",
        "example" : "789",
        "jsonSchema" : "{\r\n  \"name\" : \"orderId\",\r\n  \"in\" : \"path\",\r\n  \"description\" : \"ID of pet that needs to be fetched\",\r\n  \"required\" : true,\r\n  \"type\" : \"integer\",\r\n  \"maximum\" : 10.0,\r\n  \"minimum\" : 1.0,\r\n  \"format\" : \"int64\"\r\n}",
        "isLong" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true,
        "maximum" : 10.0,
        "minimum" : 1.0
      } ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "tags" : [ "Store" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "200",
        "message" : "successful operation",
        "hasMore" : true,
        "dataType" : "std::shared_ptr<Order>",
        "baseType" : "Order",
        "isDefault" : true,
        "simpleType" : true,
        "primitiveType" : false,
        "isBinary" : false,
        "schema" : {
          "$ref" : "#/definitions/Order"
        },
        "jsonSchema" : "{\r\n  \"description\" : \"successful operation\",\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/Order\"\r\n  }\r\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "400",
        "message" : "Invalid ID supplied",
        "hasMore" : true,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Invalid ID supplied\"\r\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "404",
        "message" : "Order not found",
        "hasMore" : false,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Order not found\"\r\n}",
        "wildcard" : false
      } ],
      "imports" : [ "Order" ],
      "examples" : [ {
        "contentType" : "application/xml",
        "example" : "<Order>\n  <id>123456</id>\n  <petId>123456</petId>\n  <quantity>0</quantity>\n  <shipDate>2000-01-23T04:56:07.000Z</shipDate>\n  <status>string</status>\n  <complete>true</complete>\n</Order>"
      }, {
        "contentType" : "application/json",
        "example" : "{\r\n  \"petId\" : 123456789,\r\n  \"quantity\" : 123,\r\n  \"id\" : 123456789,\r\n  \"shipDate\" : \"2000-01-23T04:56:07.000+0000\",\r\n  \"complete\" : true,\r\n  \"status\" : \"aeiou\"\r\n}"
      } ],
      "vendorExtensions" : { },
      "nickname" : "getOrderById",
      "operationIdLowerCase" : "getorderbyid",
      "hasHeaderParams" : false,
      "hasQueryParams" : false,
      "hasFormParams" : false,
      "hasPathParams" : true,
      "hasBodyParam" : false
    }, {
      "responseHeaders" : [ ],
      "hasConsumes" : false,
      "hasProduces" : true,
      "hasParams" : true,
      "returnSimpleType" : true,
      "isResponseBinary" : false,
      "hasReference" : true,
      "path" : "/store/order",
      "operationId" : "placeOrder",
      "returnType" : "std::shared_ptr<Order>",
      "httpMethod" : "POST",
      "returnBaseType" : "Order",
      "summary" : "Place an order for a pet",
      "notes" : "",
      "baseName" : "Store",
      "defaultResponse" : "new Order()",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/xml"
      }, {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "bodyParam" : {
        "isBodyParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "Order",
        "description" : "order placed for purchasing the pet",
        "baseType" : "Order",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"order placed for purchasing the pet\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/Order\"\r\n  }\r\n}",
        "isBinary" : false,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      },
      "allParams" : [ {
        "isBodyParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "Order",
        "description" : "order placed for purchasing the pet",
        "baseType" : "Order",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"order placed for purchasing the pet\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/Order\"\r\n  }\r\n}",
        "isBinary" : false,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "bodyParams" : [ {
        "isBodyParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "Order",
        "description" : "order placed for purchasing the pet",
        "baseType" : "Order",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"order placed for purchasing the pet\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/Order\"\r\n  }\r\n}",
        "isBinary" : false,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "pathParams" : [ ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "tags" : [ "Store" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "200",
        "message" : "successful operation",
        "hasMore" : true,
        "dataType" : "std::shared_ptr<Order>",
        "baseType" : "Order",
        "isDefault" : true,
        "simpleType" : true,
        "primitiveType" : false,
        "isBinary" : false,
        "schema" : {
          "$ref" : "#/definitions/Order"
        },
        "jsonSchema" : "{\r\n  \"description\" : \"successful operation\",\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/Order\"\r\n  }\r\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "400",
        "message" : "Invalid Order",
        "hasMore" : false,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Invalid Order\"\r\n}",
        "wildcard" : false
      } ],
      "imports" : [ "Order" ],
      "examples" : [ {
        "contentType" : "application/xml",
        "example" : "<Order>\n  <id>123456</id>\n  <petId>123456</petId>\n  <quantity>0</quantity>\n  <shipDate>2000-01-23T04:56:07.000Z</shipDate>\n  <status>string</status>\n  <complete>true</complete>\n</Order>"
      }, {
        "contentType" : "application/json",
        "example" : "{\r\n  \"petId\" : 123456789,\r\n  \"quantity\" : 123,\r\n  \"id\" : 123456789,\r\n  \"shipDate\" : \"2000-01-23T04:56:07.000+0000\",\r\n  \"complete\" : true,\r\n  \"status\" : \"aeiou\"\r\n}"
      } ],
      "vendorExtensions" : { },
      "nickname" : "placeOrder",
      "operationIdLowerCase" : "placeorder",
      "hasHeaderParams" : false,
      "hasQueryParams" : false,
      "hasFormParams" : false,
      "hasPathParams" : false,
      "hasBodyParam" : true
    } ],
    "pathPrefix" : "store"
  },
  "infoUrl" : null,
  "baseName" : "Store",
  "package" : "",
  "imports" : [ {
    "import" : "#include <map>"
  }, {
    "import" : "#include \"Order.h\""
  } ],
  "appName" : "Swagger Petstore",
  "contextPath" : "/v2",
  "appDescription" : "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
  "termsOfService" : "http://swagger.io/terms/",
  "releaseNote" : "Minor update",
  "version" : "1.0.0",
  "basePath" : "http://petstore.swagger.io/v2",
  "classname" : "StoreApi",
  "gitRepoId" : "YOUR_GIT_REPO_ID",
  "generatedDate" : "2016-05-04T18:39:34.329+02:00",
  "infoEmail" : "apiteam@swagger.io",
  "gitUserId" : "YOUR_GIT_USR_ID"
}, {
  "importPath" : ".User",
  "licenseUrl" : "http://www.apache.org/licenses/LICENSE-2.0.html",
  "appVersion" : "1.0.0",
  "generatorClass" : "class io.swagger.codegen.languages.CpprestsdkGenerator",
  "modelPackage" : "",
  "sortParamsByRequiredFlag" : true,
  "licenseInfo" : "Apache 2.0",
  "classVarName" : "user",
  "hasImport" : true,
  "basePathWithoutHost" : "/v2",
  "operations" : {
    "classname" : "UserApi",
    "operation" : [ {
      "responseHeaders" : [ ],
      "hasConsumes" : false,
      "hasProduces" : true,
      "hasParams" : true,
      "hasMore" : true,
      "isResponseBinary" : false,
      "hasReference" : false,
      "path" : "/user",
      "operationId" : "createUser",
      "httpMethod" : "POST",
      "summary" : "Create user",
      "notes" : "This can only be done by the logged in user.",
      "baseName" : "User",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/xml"
      }, {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "bodyParam" : {
        "isBodyParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "User",
        "description" : "Created user object",
        "baseType" : "User",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"Created user object\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/User\"\r\n  }\r\n}",
        "isBinary" : false,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      },
      "allParams" : [ {
        "isBodyParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "User",
        "description" : "Created user object",
        "baseType" : "User",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"Created user object\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/User\"\r\n  }\r\n}",
        "isBinary" : false,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "bodyParams" : [ {
        "isBodyParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "User",
        "description" : "Created user object",
        "baseType" : "User",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"Created user object\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/User\"\r\n  }\r\n}",
        "isBinary" : false,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "pathParams" : [ ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "tags" : [ "User" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "0",
        "message" : "successful operation",
        "hasMore" : false,
        "isDefault" : true,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"successful operation\"\r\n}",
        "wildcard" : true
      } ],
      "imports" : [ "User" ],
      "vendorExtensions" : { },
      "nickname" : "createUser",
      "operationIdLowerCase" : "createuser",
      "hasHeaderParams" : false,
      "hasQueryParams" : false,
      "hasFormParams" : false,
      "hasPathParams" : false,
      "hasBodyParam" : true
    }, {
      "responseHeaders" : [ ],
      "hasConsumes" : false,
      "hasProduces" : true,
      "hasParams" : true,
      "hasMore" : true,
      "isResponseBinary" : false,
      "hasReference" : false,
      "path" : "/user/createWithArray",
      "operationId" : "createUsersWithArrayInput",
      "httpMethod" : "POST",
      "summary" : "Creates list of users with given input array",
      "notes" : "",
      "baseName" : "User",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/xml"
      }, {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "bodyParam" : {
        "isBodyParam" : true,
        "isContainer" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "std::vector<std::shared_ptr<User>>",
        "description" : "List of user object",
        "baseType" : "User",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"List of user object\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"type\" : \"array\",\r\n    \"items\" : {\r\n      \"$ref\" : \"#/definitions/User\"\r\n    }\r\n  }\r\n}",
        "isBinary" : false,
        "isListContainer" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      },
      "allParams" : [ {
        "isBodyParam" : true,
        "isContainer" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "std::vector<std::shared_ptr<User>>",
        "description" : "List of user object",
        "baseType" : "User",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"List of user object\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"type\" : \"array\",\r\n    \"items\" : {\r\n      \"$ref\" : \"#/definitions/User\"\r\n    }\r\n  }\r\n}",
        "isBinary" : false,
        "isListContainer" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "bodyParams" : [ {
        "isBodyParam" : true,
        "isContainer" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "std::vector<std::shared_ptr<User>>",
        "description" : "List of user object",
        "baseType" : "User",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"List of user object\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"type\" : \"array\",\r\n    \"items\" : {\r\n      \"$ref\" : \"#/definitions/User\"\r\n    }\r\n  }\r\n}",
        "isBinary" : false,
        "isListContainer" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "pathParams" : [ ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "tags" : [ "User" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "0",
        "message" : "successful operation",
        "hasMore" : false,
        "isDefault" : true,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"successful operation\"\r\n}",
        "wildcard" : true
      } ],
      "imports" : [ "std::vector", "User" ],
      "vendorExtensions" : { },
      "nickname" : "createUsersWithArrayInput",
      "operationIdLowerCase" : "createuserswitharrayinput",
      "hasHeaderParams" : false,
      "hasQueryParams" : false,
      "hasFormParams" : false,
      "hasPathParams" : false,
      "hasBodyParam" : true
    }, {
      "responseHeaders" : [ ],
      "hasConsumes" : false,
      "hasProduces" : true,
      "hasParams" : true,
      "hasMore" : true,
      "isResponseBinary" : false,
      "hasReference" : false,
      "path" : "/user/createWithList",
      "operationId" : "createUsersWithListInput",
      "httpMethod" : "POST",
      "summary" : "Creates list of users with given input array",
      "notes" : "",
      "baseName" : "User",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/xml"
      }, {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "bodyParam" : {
        "isBodyParam" : true,
        "isContainer" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "std::vector<std::shared_ptr<User>>",
        "description" : "List of user object",
        "baseType" : "User",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"List of user object\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"type\" : \"array\",\r\n    \"items\" : {\r\n      \"$ref\" : \"#/definitions/User\"\r\n    }\r\n  }\r\n}",
        "isBinary" : false,
        "isListContainer" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      },
      "allParams" : [ {
        "isBodyParam" : true,
        "isContainer" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "std::vector<std::shared_ptr<User>>",
        "description" : "List of user object",
        "baseType" : "User",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"List of user object\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"type\" : \"array\",\r\n    \"items\" : {\r\n      \"$ref\" : \"#/definitions/User\"\r\n    }\r\n  }\r\n}",
        "isBinary" : false,
        "isListContainer" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "bodyParams" : [ {
        "isBodyParam" : true,
        "isContainer" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "std::vector<std::shared_ptr<User>>",
        "description" : "List of user object",
        "baseType" : "User",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"List of user object\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"type\" : \"array\",\r\n    \"items\" : {\r\n      \"$ref\" : \"#/definitions/User\"\r\n    }\r\n  }\r\n}",
        "isBinary" : false,
        "isListContainer" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "pathParams" : [ ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "tags" : [ "User" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "0",
        "message" : "successful operation",
        "hasMore" : false,
        "isDefault" : true,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"successful operation\"\r\n}",
        "wildcard" : true
      } ],
      "imports" : [ "std::vector", "User" ],
      "vendorExtensions" : { },
      "nickname" : "createUsersWithListInput",
      "operationIdLowerCase" : "createuserswithlistinput",
      "hasHeaderParams" : false,
      "hasQueryParams" : false,
      "hasFormParams" : false,
      "hasPathParams" : false,
      "hasBodyParam" : true
    }, {
      "responseHeaders" : [ ],
      "hasConsumes" : false,
      "hasProduces" : true,
      "hasParams" : true,
      "hasMore" : true,
      "isResponseBinary" : false,
      "hasReference" : false,
      "path" : "/user/{username}",
      "operationId" : "deleteUser",
      "httpMethod" : "DELETE",
      "summary" : "Delete user",
      "notes" : "This can only be done by the logged in user.",
      "baseName" : "User",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/xml"
      }, {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "allParams" : [ {
        "isPathParam" : true,
        "isPrimitiveType" : true,
        "baseName" : "username",
        "paramName" : "username",
        "dataType" : "utility::string_t",
        "description" : "The name that needs to be deleted",
        "example" : "username_example",
        "jsonSchema" : "{\r\n  \"name\" : \"username\",\r\n  \"in\" : \"path\",\r\n  \"description\" : \"The name that needs to be deleted\",\r\n  \"required\" : true,\r\n  \"type\" : \"string\"\r\n}",
        "isString" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "bodyParams" : [ ],
      "pathParams" : [ {
        "isPathParam" : true,
        "baseName" : "username",
        "paramName" : "username",
        "dataType" : "utility::string_t",
        "description" : "The name that needs to be deleted",
        "example" : "username_example",
        "jsonSchema" : "{\r\n  \"name\" : \"username\",\r\n  \"in\" : \"path\",\r\n  \"description\" : \"The name that needs to be deleted\",\r\n  \"required\" : true,\r\n  \"type\" : \"string\"\r\n}",
        "isString" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "tags" : [ "User" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "400",
        "message" : "Invalid username supplied",
        "hasMore" : true,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Invalid username supplied\"\r\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "404",
        "message" : "User not found",
        "hasMore" : false,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"User not found\"\r\n}",
        "wildcard" : false
      } ],
      "imports" : [ "utility::string_t" ],
      "vendorExtensions" : { },
      "nickname" : "deleteUser",
      "operationIdLowerCase" : "deleteuser",
      "hasHeaderParams" : false,
      "hasQueryParams" : false,
      "hasFormParams" : false,
      "hasPathParams" : true,
      "hasBodyParam" : false
    }, {
      "responseHeaders" : [ ],
      "hasConsumes" : false,
      "hasProduces" : true,
      "hasParams" : true,
      "returnSimpleType" : true,
      "hasMore" : true,
      "isResponseBinary" : false,
      "hasReference" : true,
      "path" : "/user/{username}",
      "operationId" : "getUserByName",
      "returnType" : "std::shared_ptr<User>",
      "httpMethod" : "GET",
      "returnBaseType" : "User",
      "summary" : "Get user by user name",
      "notes" : "",
      "baseName" : "User",
      "defaultResponse" : "new User()",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/xml"
      }, {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "allParams" : [ {
        "isPathParam" : true,
        "isPrimitiveType" : true,
        "baseName" : "username",
        "paramName" : "username",
        "dataType" : "utility::string_t",
        "description" : "The name that needs to be fetched. Use user1 for testing. ",
        "example" : "username_example",
        "jsonSchema" : "{\r\n  \"name\" : \"username\",\r\n  \"in\" : \"path\",\r\n  \"description\" : \"The name that needs to be fetched. Use user1 for testing. \",\r\n  \"required\" : true,\r\n  \"type\" : \"string\"\r\n}",
        "isString" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "bodyParams" : [ ],
      "pathParams" : [ {
        "isPathParam" : true,
        "baseName" : "username",
        "paramName" : "username",
        "dataType" : "utility::string_t",
        "description" : "The name that needs to be fetched. Use user1 for testing. ",
        "example" : "username_example",
        "jsonSchema" : "{\r\n  \"name\" : \"username\",\r\n  \"in\" : \"path\",\r\n  \"description\" : \"The name that needs to be fetched. Use user1 for testing. \",\r\n  \"required\" : true,\r\n  \"type\" : \"string\"\r\n}",
        "isString" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "tags" : [ "User" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "200",
        "message" : "successful operation",
        "hasMore" : true,
        "dataType" : "std::shared_ptr<User>",
        "baseType" : "User",
        "isDefault" : true,
        "simpleType" : true,
        "primitiveType" : false,
        "isBinary" : false,
        "schema" : {
          "$ref" : "#/definitions/User"
        },
        "jsonSchema" : "{\r\n  \"description\" : \"successful operation\",\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/User\"\r\n  }\r\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "400",
        "message" : "Invalid username supplied",
        "hasMore" : true,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Invalid username supplied\"\r\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "404",
        "message" : "User not found",
        "hasMore" : false,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"User not found\"\r\n}",
        "wildcard" : false
      } ],
      "imports" : [ "utility::string_t", "User" ],
      "examples" : [ {
        "contentType" : "application/xml",
        "example" : "<User>\n  <id>123456</id>\n  <username>string</username>\n  <firstName>string</firstName>\n  <lastName>string</lastName>\n  <email>string</email>\n  <password>string</password>\n  <phone>string</phone>\n  <userStatus>0</userStatus>\n</User>"
      }, {
        "contentType" : "application/json",
        "example" : "{\r\n  \"firstName\" : \"aeiou\",\r\n  \"lastName\" : \"aeiou\",\r\n  \"password\" : \"aeiou\",\r\n  \"userStatus\" : 123,\r\n  \"phone\" : \"aeiou\",\r\n  \"id\" : 123456789,\r\n  \"email\" : \"aeiou\",\r\n  \"username\" : \"aeiou\"\r\n}"
      } ],
      "vendorExtensions" : { },
      "nickname" : "getUserByName",
      "operationIdLowerCase" : "getuserbyname",
      "hasHeaderParams" : false,
      "hasQueryParams" : false,
      "hasFormParams" : false,
      "hasPathParams" : true,
      "hasBodyParam" : false
    }, {
      "responseHeaders" : [ {
        "baseName" : "X-Rate-Limit",
        "getter" : "getX-Rate-Limit",
        "setter" : "setX-Rate-Limit",
        "description" : "calls per hour allowed by the user",
        "datatype" : "int32_t",
        "datatypeWithEnum" : "int32_t",
        "name" : "X-Rate-Limit",
        "defaultValue" : "0",
        "defaultValueWithParam" : " = data.X-Rate-Limit;",
        "baseType" : "int32_t",
        "unescapedDescription" : "calls per hour allowed by the user",
        "example" : "null",
        "jsonSchema" : "{\r\n  \"type\" : \"integer\",\r\n  \"format\" : \"int32\",\r\n  \"description\" : \"calls per hour allowed by the user\"\r\n}",
        "isPrimitiveType" : true,
        "isNotContainer" : true,
        "isInteger" : true,
        "isEnum" : false,
        "vendorExtensions" : { }
      }, {
        "baseName" : "X-Expires-After",
        "complexType" : "utility::datetime",
        "getter" : "getX-Expires-After",
        "setter" : "setX-Expires-After",
        "description" : "date in UTC when token expires",
        "datatype" : "utility::datetime",
        "datatypeWithEnum" : "utility::datetime",
        "name" : "X-Expires-After",
        "defaultValue" : "utility::datetime()",
        "defaultValueWithParam" : " = data.X-Expires-After;",
        "baseType" : "utility::datetime",
        "unescapedDescription" : "date in UTC when token expires",
        "example" : "null",
        "jsonSchema" : "{\r\n  \"type\" : \"string\",\r\n  \"format\" : \"date-time\",\r\n  \"description\" : \"date in UTC when token expires\"\r\n}",
        "isNotContainer" : true,
        "isDateTime" : true,
        "isEnum" : false,
        "vendorExtensions" : { }
      } ],
      "hasConsumes" : false,
      "hasProduces" : true,
      "hasParams" : true,
      "returnSimpleType" : true,
      "hasMore" : true,
      "isResponseBinary" : false,
      "hasReference" : false,
      "path" : "/user/login",
      "operationId" : "loginUser",
      "returnType" : "utility::string_t",
      "httpMethod" : "GET",
      "returnBaseType" : "utility::string_t",
      "summary" : "Logs user into the system",
      "notes" : "",
      "baseName" : "User",
      "defaultResponse" : "U(\"\")",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/xml"
      }, {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "allParams" : [ {
        "isQueryParam" : true,
        "hasMore" : true,
        "isPrimitiveType" : true,
        "baseName" : "username",
        "paramName" : "username",
        "dataType" : "utility::string_t",
        "description" : "The user name for login",
        "example" : "username_example",
        "jsonSchema" : "{\r\n  \"name\" : \"username\",\r\n  \"in\" : \"query\",\r\n  \"description\" : \"The user name for login\",\r\n  \"required\" : true,\r\n  \"type\" : \"string\"\r\n}",
        "isString" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      }, {
        "isQueryParam" : true,
        "secondaryParam" : true,
        "isPrimitiveType" : true,
        "baseName" : "password",
        "paramName" : "password",
        "dataType" : "utility::string_t",
        "description" : "The password for login in clear text",
        "example" : "password_example",
        "jsonSchema" : "{\r\n  \"name\" : \"password\",\r\n  \"in\" : \"query\",\r\n  \"description\" : \"The password for login in clear text\",\r\n  \"required\" : true,\r\n  \"type\" : \"string\"\r\n}",
        "isString" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "bodyParams" : [ ],
      "pathParams" : [ ],
      "queryParams" : [ {
        "isQueryParam" : true,
        "hasMore" : true,
        "baseName" : "username",
        "paramName" : "username",
        "dataType" : "utility::string_t",
        "description" : "The user name for login",
        "example" : "username_example",
        "jsonSchema" : "{\r\n  \"name\" : \"username\",\r\n  \"in\" : \"query\",\r\n  \"description\" : \"The user name for login\",\r\n  \"required\" : true,\r\n  \"type\" : \"string\"\r\n}",
        "isString" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      }, {
        "isQueryParam" : true,
        "secondaryParam" : true,
        "baseName" : "password",
        "paramName" : "password",
        "dataType" : "utility::string_t",
        "description" : "The password for login in clear text",
        "example" : "password_example",
        "jsonSchema" : "{\r\n  \"name\" : \"password\",\r\n  \"in\" : \"query\",\r\n  \"description\" : \"The password for login in clear text\",\r\n  \"required\" : true,\r\n  \"type\" : \"string\"\r\n}",
        "isString" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "tags" : [ "User" ],
      "responses" : [ {
        "headers" : [ {
          "baseName" : "X-Rate-Limit",
          "getter" : "getX-Rate-Limit",
          "setter" : "setX-Rate-Limit",
          "description" : "calls per hour allowed by the user",
          "datatype" : "int32_t",
          "datatypeWithEnum" : "int32_t",
          "name" : "X-Rate-Limit",
          "defaultValue" : "0",
          "defaultValueWithParam" : " = data.X-Rate-Limit;",
          "baseType" : "int32_t",
          "unescapedDescription" : "calls per hour allowed by the user",
          "example" : "null",
          "jsonSchema" : "{\r\n  \"type\" : \"integer\",\r\n  \"format\" : \"int32\",\r\n  \"description\" : \"calls per hour allowed by the user\"\r\n}",
          "isPrimitiveType" : true,
          "isNotContainer" : true,
          "isInteger" : true,
          "isEnum" : false,
          "vendorExtensions" : { }
        }, {
          "baseName" : "X-Expires-After",
          "complexType" : "utility::datetime",
          "getter" : "getX-Expires-After",
          "setter" : "setX-Expires-After",
          "description" : "date in UTC when token expires",
          "datatype" : "utility::datetime",
          "datatypeWithEnum" : "utility::datetime",
          "name" : "X-Expires-After",
          "defaultValue" : "utility::datetime()",
          "defaultValueWithParam" : " = data.X-Expires-After;",
          "baseType" : "utility::datetime",
          "unescapedDescription" : "date in UTC when token expires",
          "example" : "null",
          "jsonSchema" : "{\r\n  \"type\" : \"string\",\r\n  \"format\" : \"date-time\",\r\n  \"description\" : \"date in UTC when token expires\"\r\n}",
          "isNotContainer" : true,
          "isDateTime" : true,
          "isEnum" : false,
          "vendorExtensions" : { }
        } ],
        "code" : "200",
        "message" : "successful operation",
        "hasMore" : true,
        "dataType" : "utility::string_t",
        "baseType" : "utility::string_t",
        "isDefault" : true,
        "simpleType" : true,
        "primitiveType" : false,
        "isBinary" : false,
        "schema" : {
          "type" : "string"
        },
        "jsonSchema" : "{\r\n  \"description\" : \"successful operation\",\r\n  \"schema\" : {\r\n    \"type\" : \"string\"\r\n  },\r\n  \"headers\" : {\r\n    \"X-Rate-Limit\" : {\r\n      \"type\" : \"integer\",\r\n      \"format\" : \"int32\",\r\n      \"description\" : \"calls per hour allowed by the user\"\r\n    },\r\n    \"X-Expires-After\" : {\r\n      \"type\" : \"string\",\r\n      \"format\" : \"date-time\",\r\n      \"description\" : \"date in UTC when token expires\"\r\n    }\r\n  }\r\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "400",
        "message" : "Invalid username/password supplied",
        "hasMore" : false,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Invalid username/password supplied\"\r\n}",
        "wildcard" : false
      } ],
      "imports" : [ "utility::string_t" ],
      "examples" : [ {
        "contentType" : "application/xml",
        "example" : "string"
      }, {
        "contentType" : "application/json",
        "example" : "\"aeiou\""
      } ],
      "vendorExtensions" : { },
      "nickname" : "loginUser",
      "operationIdLowerCase" : "loginuser",
      "hasHeaderParams" : false,
      "hasQueryParams" : true,
      "hasFormParams" : false,
      "hasPathParams" : false,
      "hasBodyParam" : false
    }, {
      "responseHeaders" : [ ],
      "hasConsumes" : false,
      "hasProduces" : true,
      "hasMore" : true,
      "isResponseBinary" : false,
      "hasReference" : false,
      "path" : "/user/logout",
      "operationId" : "logoutUser",
      "httpMethod" : "GET",
      "summary" : "Logs out current logged in user session",
      "notes" : "",
      "baseName" : "User",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/xml"
      }, {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "allParams" : [ ],
      "bodyParams" : [ ],
      "pathParams" : [ ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "tags" : [ "User" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "0",
        "message" : "successful operation",
        "hasMore" : false,
        "isDefault" : true,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"successful operation\"\r\n}",
        "wildcard" : true
      } ],
      "imports" : [ ],
      "vendorExtensions" : { },
      "nickname" : "logoutUser",
      "operationIdLowerCase" : "logoutuser",
      "hasHeaderParams" : false,
      "hasQueryParams" : false,
      "hasFormParams" : false,
      "hasPathParams" : false,
      "hasBodyParam" : false
    }, {
      "responseHeaders" : [ ],
      "hasConsumes" : false,
      "hasProduces" : true,
      "hasParams" : true,
      "isResponseBinary" : false,
      "hasReference" : false,
      "path" : "/user/{username}",
      "operationId" : "updateUser",
      "httpMethod" : "PUT",
      "summary" : "Updated user",
      "notes" : "This can only be done by the logged in user.",
      "baseName" : "User",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/xml"
      }, {
        "hasMore" : null,
        "mediaType" : "application/json"
      } ],
      "bodyParam" : {
        "isBodyParam" : true,
        "secondaryParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "User",
        "description" : "Updated user object",
        "baseType" : "User",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"Updated user object\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/User\"\r\n  }\r\n}",
        "isBinary" : false,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      },
      "allParams" : [ {
        "isPathParam" : true,
        "hasMore" : true,
        "isPrimitiveType" : true,
        "baseName" : "username",
        "paramName" : "username",
        "dataType" : "utility::string_t",
        "description" : "name that need to be updated",
        "example" : "username_example",
        "jsonSchema" : "{\r\n  \"name\" : \"username\",\r\n  \"in\" : \"path\",\r\n  \"description\" : \"name that need to be updated\",\r\n  \"required\" : true,\r\n  \"type\" : \"string\"\r\n}",
        "isString" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      }, {
        "isBodyParam" : true,
        "secondaryParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "User",
        "description" : "Updated user object",
        "baseType" : "User",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"Updated user object\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/User\"\r\n  }\r\n}",
        "isBinary" : false,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "bodyParams" : [ {
        "isBodyParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "User",
        "description" : "Updated user object",
        "baseType" : "User",
        "jsonSchema" : "{\r\n  \"in\" : \"body\",\r\n  \"name\" : \"body\",\r\n  \"description\" : \"Updated user object\",\r\n  \"required\" : true,\r\n  \"schema\" : {\r\n    \"$ref\" : \"#/definitions/User\"\r\n  }\r\n}",
        "isBinary" : false,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "pathParams" : [ {
        "isPathParam" : true,
        "baseName" : "username",
        "paramName" : "username",
        "dataType" : "utility::string_t",
        "description" : "name that need to be updated",
        "example" : "username_example",
        "jsonSchema" : "{\r\n  \"name\" : \"username\",\r\n  \"in\" : \"path\",\r\n  \"description\" : \"name that need to be updated\",\r\n  \"required\" : true,\r\n  \"type\" : \"string\"\r\n}",
        "isString" : true,
        "isEnum" : false,
        "vendorExtensions" : { },
        "required" : true
      } ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "tags" : [ "User" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "400",
        "message" : "Invalid user supplied",
        "hasMore" : true,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"Invalid user supplied\"\r\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "404",
        "message" : "User not found",
        "hasMore" : false,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "isBinary" : false,
        "jsonSchema" : "{\r\n  \"description\" : \"User not found\"\r\n}",
        "wildcard" : false
      } ],
      "imports" : [ "utility::string_t", "User" ],
      "vendorExtensions" : { },
      "nickname" : "updateUser",
      "operationIdLowerCase" : "updateuser",
      "hasHeaderParams" : false,
      "hasQueryParams" : false,
      "hasFormParams" : false,
      "hasPathParams" : true,
      "hasBodyParam" : true
    } ],
    "pathPrefix" : "user"
  },
  "infoUrl" : null,
  "baseName" : "User",
  "package" : "",
  "imports" : [ {
    "import" : "#include \"User.h\""
  }, {
    "import" : "#include <vector>"
  }, {
    "import" : "#include <cpprest/details/basic_types.h>"
  } ],
  "appName" : "Swagger Petstore",
  "contextPath" : "/v2",
  "appDescription" : "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
  "termsOfService" : "http://swagger.io/terms/",
  "releaseNote" : "Minor update",
  "version" : "1.0.0",
  "basePath" : "http://petstore.swagger.io/v2",
  "classname" : "UserApi",
  "gitRepoId" : "YOUR_GIT_REPO_ID",
  "generatedDate" : "2016-05-04T18:39:34.329+02:00",
  "infoEmail" : "apiteam@swagger.io",
  "gitUserId" : "YOUR_GIT_USR_ID"
} ]