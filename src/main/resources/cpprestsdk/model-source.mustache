{{#models}}{{#model}}

#include "{{classname}}.h"

BEGIN_SDK_NS

namespace model {

{{classname}}::{{classname}}()
{
}

{{classname}}::~{{classname}}()
{
}

void {{classname}}::validate() 
{
}

web::json::value {{classname}}::toJson() const
{
    web::json::value val;
     
	{{#vars}}{{#isPrimitiveType}}{{#required}}if(m_{{name}}IsSet)
    {
        val[U("{{baseName}}")] = ModelBase::toJson(m_{{name}});
    }
    {{/required}}{{^required}}val[U("{{baseName}}")] = ModelBase::toJson(m_{{name}});
    {{/required}}{{/isPrimitiveType}}{{^isPrimitiveType}}{{#isListContainer}}{
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_{{name}} )
        {
            {{#items.isPrimitiveType}}jsonArray.push_back(ModelBase::toJson(item));
            {{/items.isPrimitiveType}}{{^items.isPrimitiveType}}{{#items.isString}}jsonArray.push_back(ModelBase::toJson(item));
            {{/items.isString}}{{^items.isString}}{{#items.isDateTime}}jsonArray.push_back(ModelBase::toJson(item));
            {{/items.isDateTime}}{{^items.isDateTime}}jsonArray.push_back( item.get() ? item->toJson() : web::json::value::null() );
            {{/items.isDateTime}}{{/items.isString}}{{/items.isPrimitiveType}}
        }
        val[U("{{baseName}}")] = web::json::value::array(jsonArray);
    }
    {{/isListContainer}}{{^isListContainer}}{{^required}}if(m_{{name}}IsSet)
    {
        {{#isString}}val[U("{{baseName}}")] = ModelBase::toJson(m_{{name}});
        {{/isString}}{{^isString}}{{#isDateTime}}val[U("{{baseName}}")] = ModelBase::toJson(m_{{name}});
        {{/isDateTime}}{{^isDateTime}}val[U("{{baseName}}")] = m_{{name}}->toJson();
        {{/isDateTime}}{{/isString}}        
    }
    {{/required}}{{#required}}{{#isString}}val[U("{{baseName}}")] = ModelBase::toJson(m_{{name}});
    {{/isString}}{{^isString}}
    val[U("{{baseName}}")] = m_{{name}}->toJson();
    {{/isString}}{{/required}}{{/isListContainer}}{{/isPrimitiveType}}{{/vars}}

    return val;
}

void {{classname}}::fromJson(web::json::value& json)
{
	
}

void {{classname}}::toMultipart(std::shared_ptr<MultipartFormData> multipart, const std::string& namePrefix) const
{
}

void {{classname}}::fromMultiPart(web::json::value& val, const std::string& namePrefix)
{
}
    
   
{{#vars}}{{^isNotContainer}}{{{datatype}}}& {{classname}}::{{getter}}()
{
	return m_{{name}};
}
{{/isNotContainer}}{{#isNotContainer}}{{{datatype}}} {{classname}}::{{getter}}() const
{
	return m_{{name}};
}
void {{classname}}::{{setter}}({{{datatype}}} value)
{
	m_{{name}} = value;
}
{{/isNotContainer}} 
{{^required}}void {{classname}}::unset{{name}}() 
{
    m_{{name}}IsSet = false;
}
{{/required}}
{{/vars}}

}

END_SDK_NS

{{/model}}
{{/models}}